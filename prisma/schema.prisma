// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =========================================
// MODEL PENGGUNA & NEXT-AUTH
// =========================================
model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  role            UserRole  @default(USER) // Menambahkan role untuk user
  accounts        Account[]
  reviews         Review[] // Relasi: Satu User bisa punya banyak Review
  suggestions     DataSuggestion[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Enum untuk Role Pengguna
enum UserRole {
  USER
  ADMIN
}


// =========================================
// MODEL CURUG
// =========================================
model Curug {
  id            String   @id @default(cuid())
  name          String
  description   String   @db.Text
  location      String   // Bisa diisi dengan koordinat atau alamat
  imageUrl      String?  // URL gambar dari Vercel Blob
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  reviews       Review[] // Relasi: Satu Curug bisa punya banyak Review
  ticketPrice   Int?      // Harga tiket (opsional)
  difficulty    Difficulty? // Tingkat kesulitan (opsional)
  tags          String[]  // Tags seperti "Ramah Anak", dll.
  openingHours  Json?   // Jam buka (opsional, cth: "08:00 - 17:00")
  suggestions   DataSuggestion[]
}

// Tambahkan Enum baru ini di mana saja di dalam file schema
enum Difficulty {
  MUDAH
  SEDANG
  SULIT
}

model DataSuggestion {
  id            String    @id @default(cuid())
  curugId       String
  curug         Curug     @relation(fields: [curugId], references: [id], onDelete: Cascade)

  suggestedBy   User      @relation(fields: [suggestedById], references: [id], onDelete: Cascade)
  suggestedById String

  fieldName     String    // cth: "ticketPrice", "openingHours.senin"
  oldValue      String?
  newValue      String

  status        SuggestionStatus @default(PENDING)
  createdAt     DateTime  @default(now())
}

enum SuggestionStatus {
  PENDING
  APPROVED
  REJECTED
}


// =========================================
// MODEL REVIEW (ULASAN)
// =========================================
model Review {
  id        String        @id @default(cuid())
  content   String        @db.Text
  rating    Int           // Rating dari 1 sampai 5
  status    ReviewStatus  @default(PUBLISHED)

  // Relasi dengan User
  authorId  String
  author    User          @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // Relasi dengan Curug
  curugId   String
  curug     Curug         @relation(fields: [curugId], references: [id], onDelete: Cascade)

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

// Enum untuk Status Review
enum ReviewStatus{
  PENDING
  PUBLISHED
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}